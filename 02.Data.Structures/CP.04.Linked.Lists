1.  What are some pros and cons of using linked lists instead of arrays?

    Pros of linked lists are they take up small amounts of memory meaning huge
    lists can be employed.  The main con of linked lists is that specific items
    are not as easily findable as in an array.

2.  Come up with a real world example of a linked list.

    I work in medical coding and billing presently.  On the main billing form
    there is a box where all the diagnosis codes get listed like an array.
    Further on, there is a line for the procedure which has a pointer box which
    points (links) to a specific diagnosis code.

1.  The linked list push function should take a value, create a node, and add it
to the end of a list. Below is pseudocode for a push function for a singly linked
list. However, there is something wrong with it. Submit both an explanation of
the bug and a functional implementation of the method.  (answers below)

2.  Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d
(answer below)

3.  Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a
(answer below)

    FUNCTION push(element)
    CREATE node
    SET node.value TO element
    SET node.next TO null

    IF the head node does not exist
     THEN SET head to node
    ELSE
     SET current to head
     // (BUG) after setting current to head a while loop should be inserted to iterate if a current.next exists
     // WHILE current.next SET current to current.next
     SET current.next to node
    END IF
    END FUNCTION

    class Node {
      constructor(data){
        this.data = data;
        this.next = null;
      }
    }

    class LinkedList {
      constructor(){
        this.head = null;
        this.length = 0;
      }

      add(data){
        var node = new Node(data);
        var current;
        if (this.head == null){
          this.head = node;
        } else {
          current = this.head;
          while(current.next){
            current = current.next;
          }
        current.next = node;
         }
       this.length++;
      }

      removeDups(){
        var header = this.head;
        //Get current item
        //compare to every other item in list
        //  keep track of current, go next by next through items in the list comparing them
        //if no duplicate, keep in list
        //if duplicate, skip adding to the list
        while(header != null){
          let nextNode = header;
          while(nextNode.next !== null){
          if(header.data === nextNode.next.data){
            nextNode.next = nextNode.next.next;
          }else{
            nextNode = nextNode.next;
          }
          }
          header = header.next
        }
      }

      listRev(){
        var prev = null;
        var curr = this.head;
        var next;
        while(curr){
          next = curr.next; //set next to this.head.next
          curr.next = prev; //point curr.next to prev
          prev = curr;  //set prev to equal this.head
          curr = next;  //step forward
        }
        this.head = prev;
      }
    }

    var sll = new LinkedList();
    sll.add(10);
    sll.add(3);
    sll.add(10);
    sll.add(3);
    sll.add(10);
    sll.add(3);
    sll.add(3);
    sll.add(10);
    console.log(sll);
    sll.removeDups();
    console.log(sll);
    sll.add(17);
    sll.listRev();
    console.log(sll);
